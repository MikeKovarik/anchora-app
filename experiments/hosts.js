// Experimental
// Requires admin priviledges
import fs from 'fs'
import cp from 'child_process'
import {promisify} from 'util'
var exec = (...args) => {
	return new Promise((resolve, reject) => {
		//cp.exec(...args, (err, )) // TODO
	})
}

const hostsPath = 'C:/Windows/System32/drivers/etc/hosts'
const hostsBackupPath = 'C:/Windows/System32/drivers/etc/hosts_backup'

async function readHosts() {
	var buffer = await fs.readFile(hostsPath)
	return buffer
		.toString()
		.split('\n')
		.map(line => line.split('#')[0].trim())
		.filter(line => line.length)
		.map(line => {
			var [ip, domain] = line.split(/\s+/)
			return {ip, domain}
		})
		.filter(obj => obj.ip && obj.domain)
}

async function writeHosts(newHosts) {
	try {
		// Original hosts file already backed up.
		await fs.stat(hostsBackupPath)
	} catch(err) {
		await new Promise((resolve, reject) => {
			// Backup of host file doesn't exist yet. Create it.
			fs.createReadStream(hostsPath)
				.pipe(fs.createWriteStream(hostsBackupPath))
				.on('end', resolve)
				.on('error', reject)
		})
	}

	var data = '# THIS HOSTS FILE WAS GENERATED BY ANCHORA STATIC SERVER APP'
	data += '\n\n'
	data += newHosts.map(obj => {
		return ' '.repeat(8)
			 + obj.ip.padEnd(16, ' ')
			 + obj.domain
	}).join('\n')

	await fs.writeFile(hostsPath, data)
	//await exec('ipconfig /flushdns')
}

readHosts().then(hosts => {
	hosts.push({domain: 'sombra.test', ip: '127.0.0.0'})
	hosts.push({domain: 'sombra.test', ip: '::1'})
	return writeHosts(hosts)
})